{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","class","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.caee5c50.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div class=\"container-fluid\">\r\n                <a class=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span class=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\r\n                    <ul class=\"navbar-nav\">\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\" href=\"#\">About</a>\r\n                        </li>\r\n                        <li class=\"nav-item\"></li>\r\n\r\n\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n\r\n\r\n    )\r\n}\r\nNavbar.propTypes={title: PropTypes.string}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"OnChange\");\r\n    setText(event.target.value);\r\n  };\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    // console.log(\"Convert to Uppercase was clicked\");\r\n    props.showAlert(\"Converted to UpperCase!\",\"success\");\r\n  };\r\n  \r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to LowerCase!\",\"success\");\r\n    \r\n  };\r\n  const [text, setText] = useState(\"Enter text here\");\r\n  return (\r\n    <>\r\n      <div className=\"container\"  style={{color: props.mode==='dark'?'white':'black'}}></div>\r\n\r\n      <div>\r\n        <h1  style={{color: props.mode==='dark'?'white':'black'}}>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange} style={{backgroundColor:props.mode==='light'?'white':'grey',color: props.mode==='dark'?'white':'black'}}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary \" onClick={handleUpClick}>\r\n          Convert to UpperCase\r\n        </button>\r\n\r\n        <button className=\"btn btn-primary mx-3\" onClick={handleLoClick}>\r\n          Convert to LowerCase\r\n        </button>\r\n      </div>\r\n      <div className=\"container\"  style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h1>Your text Summary</h1>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length}Minutes Read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\n    function Alert(props) {\r\n        const capitalize = (word) => {\r\n            const lower = word.toLowerCase();\r\n            return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n        }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Alert\r\n","import './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether dark mode enable or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n     <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container\">\n        <TextForm heading=\"Enter text to analyze\"  mode={mode} showAlert={showAlert} />\n      {/* <Router>\n       \n        \n          <Routes>\n          <Route path=\"/about\" element={<About />}>\n            </Route>\n            <Route path=\"/\" element={}>\n            </Route>\n          </Routes> */}\n\n\n        </div>\n      {/* </Router> */}\n\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}